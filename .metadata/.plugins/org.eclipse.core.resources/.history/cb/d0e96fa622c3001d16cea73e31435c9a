package com.example.demo.serviceimpl;

import static org.junit.jupiter.api.Assertions.*;


import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;

import org.springframework.test.context.junit4.SpringRunner;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.example.demo.entity.Vendor;
import com.example.demo.exception.InvalidDataException;
import com.example.demo.repository.VendorRepository;
import com.example.demo.service.VendorService;
import com.example.demo.serviceimpl.*;

@RunWith(SpringRunner.class)
@SpringBootTest
class VendorServiceImplTest {

	@Autowired
	private VendorService vendorService;
	
	@Autowired
	private VendorServiceImpl vendorServiceImpl;

	@MockBean
	private VendorRepository vendorRepository;

	@Test
	public void createVendor() {
		Vendor vendor = new Vendor();
		vendor.setVendorName("Test Vendor");
		vendor.setVendorCode("TESTVENDOR");
		vendor.setAddress("123 Test St");
		vendor.setCity("Testville");
		vendor.setState("TS");
		vendor.setPincode("123456");
		vendor.setPhone("1234567890");
		vendor.setEmail("testvendor@test.com");

		Mockito.when(vendorRepository.save(Mockito.any(Vendor.class))).thenReturn(vendor);
       
		Vendor createdVendor = vendorService.createVendor(vendor);

		assertEquals(vendor.getVendorName(), createdVendor.getVendorName());
		assertEquals(vendor.getVendorCode(), createdVendor.getVendorCode());
		assertEquals(vendor.getAddress(), createdVendor.getAddress());
		assertEquals(vendor.getCity(), createdVendor.getCity());
		assertEquals(vendor.getState(), createdVendor.getState());
		assertEquals(vendor.getPincode(), createdVendor.getPincode());
		assertEquals(vendor.getPhone(), createdVendor.getPhone());
		assertEquals(vendor.getEmail(), createdVendor.getEmail());
	}

	@Test
	public void getVendorById() {
		Vendor vendor = new Vendor();
		vendor.setId(1L);
		vendor.setVendorName("Test Vendor");
		vendor.setVendorCode("TESTVENDOR");
		vendor.setAddress("123 Test St");
		vendor.setCity("Testville");
		vendor.setState("TS");
		vendor.setPincode("123456");
		vendor.setPhone("1234567890");
		vendor.setEmail("testvendor@test.com");

		Mockito.when(vendorRepository.findById(1L)).thenReturn(Optional.of(vendor));

		Vendor retrievedVendor = vendorService.getVendorById(1L);

		assertEquals(vendor.getVendorName(), retrievedVendor.getVendorName());
		assertEquals(vendor.getVendorCode(), retrievedVendor.getVendorCode());
		assertEquals(vendor.getAddress(), retrievedVendor.getAddress());
		assertEquals(vendor.getCity(), retrievedVendor.getCity());
		assertEquals(vendor.getState(), retrievedVendor.getState());
		assertEquals(vendor.getPincode(), retrievedVendor.getPincode());
		assertEquals(vendor.getPhone(), retrievedVendor.getPhone());
		assertEquals(vendor.getEmail(), retrievedVendor.getEmail());
	}

	@Test
	public void getVendorByVendorCode() {
		Vendor vendor = new Vendor();
		vendor.setId(1L);
		vendor.setVendorName("Test Vendor");
		vendor.setVendorCode("TESTVENDOR");
		vendor.setAddress("123 Test St");
		vendor.setCity("Testville");
		vendor.setState("TS");
		vendor.setPincode("123456");
		vendor.setPhone("1234567890");
		vendor.setEmail("testvendor@test.com");

		Mockito.when(vendorRepository.findByVendorCode("TESTVENDOR")).thenReturn(Optional.of(vendor));

		Vendor retrievedVendor = vendorService.getVendorByVendorCode("TESTVENDOR");

		assertEquals(vendor.getVendorName(), retrievedVendor.getVendorName());
		assertEquals(vendor.getVendorCode(), retrievedVendor.getVendorCode());
		assertEquals(vendor.getAddress(), retrievedVendor.getAddress());
		assertEquals(vendor.getCity(), retrievedVendor.getCity());
		assertEquals(vendor.getState(), retrievedVendor.getState());
		assertEquals(vendor.getPincode(), retrievedVendor.getPincode());
		assertEquals(vendor.getPhone(), retrievedVendor.getPhone());
		assertEquals(vendor.getEmail(), retrievedVendor.getEmail());
	}

	@Test
	public void updateVendor() {
		Vendor vendor = new Vendor();
		vendor.setId(1L);
		vendor.setVendorName("Test Vendor");
		vendor.setVendorCode("TESTVENDOR");
		vendor.setAddress("123 Test St");
		vendor.setCity("Testville");
		vendor.setState("TS");
		vendor.setPincode("123456");
		vendor.setPhone("1234567890");
		vendor.setEmail("testvendor@test.com");

		Mockito.when(vendorRepository.findById(1L)).thenReturn(Optional.of(vendor));
		Mockito.when(vendorRepository.save(Mockito.any(Vendor.class))).thenReturn(vendor);

		Vendor updatedVendor = vendorService.updateVendor(1L, vendor);

		assertEquals(vendor.getVendorName(), updatedVendor.getVendorName());
		assertEquals(vendor.getVendorCode(), updatedVendor.getVendorCode());
		assertEquals(vendor.getAddress(), updatedVendor.getAddress());
		assertEquals(vendor.getCity(), updatedVendor.getCity());
		assertEquals(vendor.getState(), updatedVendor.getState());
		assertEquals(vendor.getPincode(), updatedVendor.getPincode());
		assertEquals(vendor.getPhone(), updatedVendor.getPhone());
		assertEquals(vendor.getEmail(), updatedVendor.getEmail());
	}

	@Test
	public void deleteVendor() {
		Vendor vendor = new Vendor();
		vendor.setId(1L);
		vendor.setVendorName("Test Vendor");
		vendor.setVendorCode("TESTVENDOR");
		vendor.setAddress("123 Test St");
		vendor.setCity("Testville");
		vendor.setState("TS");
		vendor.setPincode("123456");
		vendor.setPhone("1234567890");
		vendor.setEmail("testvendor@test.com");

		Mockito.when(vendorRepository.findById(1L)).thenReturn(Optional.of(vendor));

		vendorService.deleteVendor(1L);

		Mockito.verify(vendorRepository, Mockito.times(1)).deleteById(1L);
	}

	@Test
	public void testGetAllVendors() {

		Vendor vendor1 = new Vendor();
		vendor1.setId(1L);
		vendor1.setVendorName("Test Vendor");
		vendor1.setVendorCode("TESTVENDOR");
		vendor1.setAddress("123 Test St");
		vendor1.setCity("Testville");
		vendor1.setState("TS");
		vendor1.setPincode("123456");
		vendor1.setPhone("1234567890");
		vendor1.setEmail("testvendor@test.com");

		List<Vendor> vendors = new ArrayList<>();
		vendors.add(vendor1);

		Mockito.when(vendorRepository.findAll()).thenReturn(vendors);
		List<Vendor> result = vendorService.getAllVendors();
		Mockito.verify(vendorRepository, Mockito.times(1)).findAll();

		assertEquals(vendors, result);
	}
	
	@Test
	public void testValidateVendor() {
	    // Valid vendor
	    Vendor vendor1 = new Vendor();
	    vendor1.setId(1L);
		vendor1.setVendorName("Test Vendor");
		vendor1.setVendorCode("TESTVENDOR");
		vendor1.setAddress("123 Test St");
		vendor1.setCity("Testville");
		vendor1.setState("TS");
		vendor1.setPincode("123456");
		vendor1.setPhone("1234567890");
		vendor1.setEmail("testvendor@test.com");
	    
	    vendorServiceImpl.validateVendor(vendor1);

	    // Invalid pincode
	    Vendor vendor2 = new Vendor();
	    vendor1.setId(1L);
		vendor1.setVendorName("Test Vendor");
		vendor1.setVendorCode("TESTVENDOR");
		vendor1.setAddress("123 Test St");
		vendor1.setCity("Testville");
		vendor1.setState("TS");
		vendor1.setPincode("1234");
		vendor1.setPhone("1234567890");
		vendor1.setEmail("testvendor@test.com");
		try {
		    vendorServiceImpl.validateVendor(vendor2);
		} catch (InvalidDataException e) {
		    assertEquals("Invalid Pincode", e.getMessage());
		}

//	    // Invalid phone number
	    Vendor vendor3 = new Vendor();
	    vendor1.setId(1L);
		vendor1.setVendorName("Test Vendor");
		vendor1.setVendorCode("TESTVENDOR");
		vendor1.setAddress("123 Test St");
		vendor1.setCity("Testville");
		vendor1.setState("TS");
		vendor1.setPincode("123456");
		vendor1.setPhone("1234560");
		vendor1.setEmail("testvendor@test.com");
		try {
		    vendorServiceImpl.validateVendor(vendor2);
		} catch (InvalidDataException e) {
		    assertEquals("Invalid Phone Number", e.getMessage());
		}
		

	    // Invalid email address
	    Vendor vendor4 = new Vendor();
	    vendor1.setId(1L);
		vendor1.setVendorName("Test Vendor");
		vendor1.setVendorCode("TESTVENDOR");
		vendor1.setAddress("123 Test St");
		vendor1.setCity("Testville");
		vendor1.setState("TS");
		vendor1.setPincode("123456");
		vendor1.setPhone("1234567890");
		vendor1.setEmail("@testvendortest.com");
		try {
		    vendorServiceImpl.validateVendor(vendor2);
		} catch (InvalidDataException e) {
		    assertEquals("Invalid Email", e.getMessage());
		}
	    
	   
	}
	
	
	
	
	
	
	
	

}
