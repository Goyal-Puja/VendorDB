package com.example.demo;


import static org.junit.Assert.assertEquals;

import java.util.Optional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.example.demo.entity.Vendor;
import com.example.demo.repository.VendorRepository;
import com.example.demo.service.ResourceNotFoundException;
import com.example.demo.serviceimpl.VendorServiceImpl;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
class VendordbApplicationTests {

	
	@Autowired
    private VendorServiceImpl vendorServiceImpl;
	@MockBean
	private VendorRepository vendorRepository;
	
	@Test
	   public void createVendor() {
	       Vendor vendor = new Vendor();
	       vendor.setVendorName("Test Vendor");
	       vendor.setVendorCode("TESTVENDOR");
	       vendor.setAddress("123 Test St");
	       vendor.setCity("Testville");
	       vendor.setState("TS");
	       vendor.setPincode("123456");
	       vendor.setPhone("1234567890");
	       vendor.setEmail("testvendor@test.com");

	       Mockito.when(vendorRepository.save(Mockito.any(Vendor.class))).thenReturn(vendor);

	       Vendor createdVendor = vendorServiceImpl.createVendor(vendor);

	       assertEquals(vendor.getVendorName(), createdVendor.getVendorName());
	       assertEquals(vendor.getVendorCode(), createdVendor.getVendorCode());
	       assertEquals(vendor.getAddress(), createdVendor.getAddress());
	       assertEquals(vendor.getCity(), createdVendor.getCity());
	       assertEquals(vendor.getState(), createdVendor.getState());
	       assertEquals(vendor.getPincode(), createdVendor.getPincode());
	       assertEquals(vendor.getPhone(), createdVendor.getPhone());
	       assertEquals(vendor.getEmail(), createdVendor.getEmail());
	   }

	@Test
	   public void getVendorById() {
	       Vendor vendor = new Vendor();
	       vendor.setId(1L);
	       vendor.setVendorName("Test Vendor");
	       vendor.setVendorCode("TESTVENDOR");
	       vendor.setAddress("123 Test St");
	       vendor.setCity("Testville");
	       vendor.setState("TS");
	       vendor.setPincode("123456");
	       vendor.setPhone("1234567890");
	       vendor.setEmail("testvendor@test.com");

	       Mockito.when(vendorRepository.findById(1L)).thenReturn(Optional.of(vendor));

	       Vendor retrievedVendor = vendorServiceImpl.getVendorById(1L);

	       assertEquals(vendor.getVendorName(), retrievedVendor.getVendorName());
	       assertEquals(vendor.getVendorCode(), retrievedVendor.getVendorCode());
	       assertEquals(vendor.getAddress(), retrievedVendor.getAddress());
	       assertEquals(vendor.getCity(), retrievedVendor.getCity());
	       assertEquals(vendor.getState(), retrievedVendor.getState());
	       assertEquals(vendor.getPincode(), retrievedVendor.getPincode());
	       assertEquals(vendor.getPhone(), retrievedVendor.getPhone());
	       assertEquals(vendor.getEmail(), retrievedVendor.getEmail());
	   }

	   @Test(expected = ResourceNotFoundException.class)
	   public void getVendorByIdNotFound() {
	       Mockito.when(vendorRepository.findById(1L)).thenReturn(Optional.empty());

	       vendorServiceImpl.getVendorById(1L);
	   }


}
